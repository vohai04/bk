@page
@model BookInfoFinder.Pages.FavoritesModel
@{
    ViewData["Title"] = "Danh s√°ch y√™u th√≠ch";
}

<div class="container-fluid px-4 py-4">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="bi bi-heart-fill me-2"></i>Danh s√°ch y√™u th√≠ch
                    </h2>
                    @if (!string.IsNullOrEmpty(Model.UserName))
                    {
                        <p class="text-muted mb-0">Xin ch√†o <strong>@Model.UserName</strong>! ƒê√¢y l√† c√°c s√°ch b·∫°n ƒë√£ y√™u th√≠ch üíñ</p>
                    }
                </div>
                <div class="d-flex gap-2">
                    <button id="btnRefresh" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-arrow-clockwise me-1"></i>L√†m m·ªõi
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.UserName))
            {
                <!-- Loading State -->
                <div id="loadingState" class="text-center py-5" style="display: none;">
                    <div class="spinner-border spinner-border-lg text-primary me-3" role="status"></div>
                    <span class="text-muted fs-5">ƒêang t·∫£i danh s√°ch y√™u th√≠ch...</span>
                </div>

                <!-- Books Container -->
                <div id="favoriteBooksContainer">
                    <!-- Content will be loaded here -->
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="text-center py-5" style="display: none;">
                    <i class="bi bi-heart text-muted" style="font-size: 4rem;"></i>
                    <h4 class="text-muted mt-3">Ch∆∞a c√≥ s√°ch y√™u th√≠ch</h4>
                    <p class="text-muted">H√£y t√¨m ki·∫øm v√† th√™m s√°ch v√†o danh s√°ch y√™u th√≠ch c·ªßa b·∫°n!</p>
                    <a href="/" class="btn btn-primary">
                        <i class="bi bi-search me-1"></i>Kh√°m ph√° s√°ch ngay
                    </a>
                </div>

                <!-- Pagination -->
                <nav id="paginationNav" aria-label="Favorite books pagination" class="mt-4" style="display: none;">
                    <ul class="pagination justify-content-center" id="paginationButtons"></ul>
                </nav>
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-person-x text-warning" style="font-size: 4rem;"></i>
                        <h4 class="text-warning mt-3">C·∫ßn ƒëƒÉng nh·∫≠p</h4>
                        <p class="text-muted mb-4">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch y√™u th√≠ch c·ªßa m√¨nh</p>
                        <a href="/Account/Login" class="btn btn-primary">
                            <i class="bi bi-box-arrow-in-right me-1"></i>ƒêƒÉng nh·∫≠p ngay
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
 
@section Scripts {
<script>
const pageSize = 8;
let currentGlobalPage = 1;

function showLoading() {
    $('#loadingState').show();
    $('#favoriteBooksContainer').hide();
    $('#emptyState').hide();
    $('#paginationNav').hide();
}

function hideLoading() {
    $('#loadingState').hide();
}

function getCurrentPageFromUrl() {
    const params = new URLSearchParams(window.location.search);
    const page = parseInt(params.get("page"));
    return (!isNaN(page) && page > 0) ? page : 1;
}

function updateUrlPage(page) {
    const url = new URL(window.location.href);
    url.searchParams.set('page', page);
    window.history.pushState({}, '', url);
}

function loadFavoriteBooks(page = 1) {
    showLoading();
    
    fetch(`/Favorites?handler=AjaxFavorites&page=${page}&pageSize=${pageSize}`)
        .then(res => res.ok ? res.json() : Promise.reject(res.status))
        .then(data => {
            hideLoading();
            currentGlobalPage = page;
            renderFavoriteBooks(data.books, data.totalPages, data.currentPage || page);
        })
        .catch(() => {
            hideLoading();
            $('#favoriteBooksContainer').html(`
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>C√≥ l·ªói khi t·∫£i danh s√°ch y√™u th√≠ch
                </div>
            `).show();
            showToast("L·ªói khi t·∫£i danh s√°ch y√™u th√≠ch", "error");
        });
}

function renderFavoriteBooks(books, totalPages, currentPage) {
    const $container = $('#favoriteBooksContainer');
    const $paginationNav = $('#paginationNav');
    const $emptyState = $('#emptyState');

    if (!books || books.length === 0) {
        $container.hide();
        $emptyState.show();
        $paginationNav.hide();
        if (currentPage === 1) {
            showToast("B·∫°n ch∆∞a c√≥ s√°ch y√™u th√≠ch n√†o", "info");
        }
        return;
    }

    $emptyState.hide();
    $container.show();

    let html = '<div class="row g-4">';
    books.forEach((book, index) => {
        const imageSrc = book.imageBase64 && book.imageBase64 !== "" ? book.imageBase64 : "/images/default-book.jpg";
        const tags = book.tags?.length ? book.tags.join(", ") : "Kh√¥ng r√µ"; // Ensure tags are joined as a string
        const category = book.category || "Kh√¥ng r√µ"; // Ensure category has a fallback

        html += `
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                <div class="card h-100 shadow-sm book-card-hover" data-book-id="${book.bookId}">
                    <div class="position-relative">
                        <img src="${imageSrc}" class="card-img-top" alt="${book.title}" 
                             style="height: 250px; object-fit: cover;" 
                             onerror="this.src='/images/default-book.jpg'" />
                        <div class="position-absolute top-0 end-0 p-2">
                            <span class="badge bg-danger">
                                <i class="bi bi-heart-fill"></i>
                            </span>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-dark mb-2 fw-bold" style="min-height: 60px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                            ${book.title}
                        </h5>
                        <div class="book-info mb-3">
                            <p class="mb-1 text-muted">
                                <i class="bi bi-person me-1"></i>
                                <strong>T√°c gi·∫£:</strong> ${book.author || 'Kh√¥ng r√µ'}
                            </p>
                            <p class="mb-1 text-muted">
                                <i class="bi bi-bookmark me-1"></i>
                                <strong>Th·ªÉ lo·∫°i:</strong> ${category}
                            </p>
                            <p class="mb-2 text-muted">
                                <i class="bi bi-tags me-1"></i>
                                <strong>Tags:</strong> <span class="small">${tags}</span>
                            </p>
                        </div>
                        <div class="mt-auto d-flex gap-2">
                            <a class="btn btn-outline-primary btn-sm flex-grow-1" href="/BookDetail/${book.bookId}">
                                <i class="bi bi-eye me-1"></i>Xem chi ti·∫øt
                            </a>
                            <button type="button" class="btn btn-outline-danger btn-sm remove-btn" data-bookid="${book.bookId}">
                                <i class="bi bi-heart-fill"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    html += "</div>";

    $container.html(html);

    // Show pagination if needed
    if (totalPages > 1) {
        $paginationNav.show();
        // Use renderPagination from site.js
        renderPagination("#paginationButtons", totalPages, currentPage, function (targetPage) {
            updateUrlPage(targetPage);
            loadFavoriteBooks(targetPage);
        });
    } else {
        $paginationNav.hide();
    }

    // Attach remove favorite events
    $('.remove-btn').on('click', function() {
        const bookId = $(this).data('bookid');
        const $btn = $(this);
        const $card = $btn.closest('.card');
        
        showConfirmModal(
            'X√°c nh·∫≠n x√≥a',
            'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s√°ch n√†y kh·ªèi danh s√°ch y√™u th√≠ch kh√¥ng?',
            function() {
                $btn.prop('disabled', true).html('<i class="bi bi-hourglass-split"></i>');
                
                fetch('/Favorites?handler=RemoveFavorite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                    },
                    body: JSON.stringify({ bookId: parseInt(bookId) })
                })
                .then(res => res.ok ? res.json() : Promise.reject(res.status))
                .then(data => {
                    if (data.success) {
                        showToast("ƒê√£ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch", "success");
                        // Remove card immediately
                        $card.fadeOut(300, function() {
                            $(this).remove();
                            // Check if page is now empty and reload if needed
                            const remainingCards = $('#favoriteBooksContainer .card').length - 1; // -1 because this card is being removed
                            if (remainingCards === 0 && currentGlobalPage > 1) {
                                // If page becomes empty and not first page, go to previous page
                                loadFavoriteBooks(currentGlobalPage - 1);
                            } else if (remainingCards === 0) {
                                // If first page becomes empty, show empty state
                                $('#favoriteBooksContainer').hide();
                                $('#emptyState').show();
                                $('#paginationNav').hide();
                            }
                        });
                    } else {
                        showToast(data.message || "C√≥ l·ªói khi x√≥a", "error");
                        $btn.prop('disabled', false).html('<i class="bi bi-heart-fill"></i>');
                    }
                })
                .catch(() => {
                    showToast("L·ªói khi x√≥a kh·ªèi danh s√°ch y√™u th√≠ch", "error");
                    $btn.prop('disabled', false).html('<i class="bi bi-heart-fill"></i>');
                });
            }
        );
    });
}

// Refresh button
$('#btnRefresh').on('click', function() {
    const $btn = $(this);
    $btn.prop('disabled', true).html('<i class="bi bi-arrow-clockwise spin me-1"></i>ƒêang t·∫£i...');
    
    loadFavoriteBooks(currentGlobalPage);
    
    setTimeout(() => {
        $btn.prop('disabled', false).html('<i class="bi bi-arrow-clockwise me-1"></i>L√†m m·ªõi');
    }, 1000);
});

// Initialize
$(document).ready(function() {
    const initialPage = getCurrentPageFromUrl();
    loadFavoriteBooks(initialPage);
});

// Handle browser back/forward
window.addEventListener('popstate', () => {
    const page = getCurrentPageFromUrl();
    loadFavoriteBooks(page);
});
</script>

<style>
.book-card-hover {
    transition: all 0.3s ease;
    border: 1px solid #e0e0e0;
}

.book-card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
    border-color: var(--bs-primary);
}

.spin {
    animation: spin 1s linear infinite;
}

/* Keyframes animation */
@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.book-info {
    font-size: 0.9rem;
}

.card-img-top {
    border-radius: 0.375rem 0.375rem 0 0;
}
</style>
}