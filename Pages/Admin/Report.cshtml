@page
@model BookInfoFinder.Pages.Admin.ReportModel
@{
    ViewData["Title"] = "Báo cáo thống kê";
    ViewData["Icon"] = "bi bi-graph-up";
    ViewData["Description"] = "Báo cáo và thống kê hệ thống";
}

@Html.AntiForgeryToken()

<div class="admin-form-wrapper mb-4">
    <div class="row align-items-center">
        <div class="col-md-8">
            <h3 class="mb-0">
                <i class="bi bi-bar-chart"></i>
                Tổng quan hệ thống
            </h3>
            <p class="text-muted mb-0">Thống kê và báo cáo chi tiết về dữ liệu hệ thống</p>
        </div>
        <div class="col-md-4 text-end">
            <button id="exportPdfBtn" class="btn btn-admin-danger">
                <i class="bi bi-file-pdf"></i>
                Xuất báo cáo PDF
            </button>
            <button id="refreshDataBtn" class="btn btn-admin-primary ms-2">
                <i class="bi bi-arrow-clockwise"></i>
                Làm mới
            </button>
        </div>
    </div>
</div>

<!-- Tổng quan thống kê -->
<div class="admin-stats-grid mb-4">
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #10b981, #059669);">
            <i class="bi bi-book-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalBooks">0</div>
        <div class="admin-stat-label">Tổng số sách</div>
    </div>
    
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);">
            <i class="bi bi-person-badge-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalAuthors">0</div>
        <div class="admin-stat-label">Tác giả</div>
    </div>
    
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #f59e0b, #d97706);">
            <i class="bi bi-tags-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalCategories">0</div>
        <div class="admin-stat-label">Thể loại</div>
    </div>
    
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);">
            <i class="bi bi-building-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalPublishers">0</div>
        <div class="admin-stat-label">Nhà xuất bản</div>
    </div>
    
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #ef4444, #dc2626);">
            <i class="bi bi-people-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalUsers">0</div>
        <div class="admin-stat-label">Người dùng</div>
    </div>
    
    <div class="admin-stat-card">
        <div class="admin-stat-icon" style="background: linear-gradient(135deg, #06b6d4, #0891b2);">
            <i class="bi bi-tag-fill"></i>
        </div>
        <div class="admin-stat-value" id="totalTags">0</div>
        <div class="admin-stat-label">Tags</div>
    </div>
</div>

<!-- Biểu đồ thống kê -->
<div class="row">
    <div class="col-lg-6 mb-4">
        <div class="admin-form-wrapper">
            <h4 class="mb-4">
                <i class="bi bi-bar-chart"></i>
                Sách theo năm xuất bản
            </h4>
            <div class="chart-container" style="position: relative; height: 300px;">
                <canvas id="yearBarChart"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-6 mb-4">
        <div class="admin-form-wrapper">
            <h4 class="mb-4">
                <i class="bi bi-person"></i>
                Top tác giả có nhiều sách nhất
            </h4>
            <div class="chart-container" style="position: relative; height: 300px;">
                <canvas id="authorChart"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-6 mb-4">
        <div class="admin-form-wrapper">
            <h4 class="mb-4">
                <i class="bi bi-building"></i>
                Phân bố sách theo nhà xuất bản
            </h4>
            <div class="chart-container" style="position: relative; height: 300px;">
                <canvas id="publisherChart"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-6 mb-4">
        <div class="admin-form-wrapper">
            <h4 class="mb-4">
                <i class="bi bi-pie-chart"></i>
                Phân bố sách theo thể loại
            </h4>
            <div class="chart-container" style="position: relative; height: 300px;">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/site.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            // Đợi Chart.js load
            setTimeout(function() {
                initializeReport();
            }, 500);
        });
        
        function initializeReport() {
            console.log('Initializing report...');
            
            // Set current date and time
            const now = new Date();
            
            // Kiểm tra Chart.js
            if (typeof Chart === 'undefined') {
                console.error('Chart.js not loaded');
                showToast('Lỗi: Chart.js không tải được!', 'error');
                return;
            }
            
            console.log('Chart.js loaded successfully');
            loadReportData();
        }
        
        function loadReportData() {
            // Show loading
            $('.admin-stat-value').html('<i class="bi bi-arrow-clockwise"></i>');
            
            console.log('Loading report data...');
            
            // Load statistics from server
            $.get('/Admin/Report?handler=GetStatistics')
                .done(function(data) {
                    console.log('Raw API Response:', data);
                    
                    if (data && data.success) {
                        console.log('Statistics:', data.statistics);
                        console.log('Chart Data:', data.chartData);
                        
                        updateStatistics(data.statistics);
                        createCharts(data.chartData);
                        showToast('Dữ liệu đã được tải thành công!', 'success');
                    } else {
                        console.error('API returned error:', data);
                        showToast('Không thể tải dữ liệu từ database!', 'error');
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('AJAX Error:', error);
                    console.error('Response:', xhr.responseText);
                    showToast('Lỗi kết nối đến server: ' + error, 'error');
                });
        }
        
        function updateStatistics(stats) {
            console.log('Updating statistics:', stats);
            $('#totalBooks').text(stats.totalBooks || 0);
            $('#totalAuthors').text(stats.totalAuthors || 0);
            $('#totalCategories').text(stats.totalCategories || 0);
            $('#totalPublishers').text(stats.totalPublishers || 0);
            $('#totalUsers').text(stats.totalUsers || 0);
            $('#totalTags').text(stats.totalTags || 0);
        }
        
        function createCharts(chartData) {
            console.log('Creating charts with data:', chartData);
            
            if (typeof Chart === 'undefined') {
                console.error('Chart.js is not available');
                return;
            }
            
            // Chart color palette
            const chartColors = [
                '#4f46e5', '#06b6d4', '#10b981', '#f59e0b', 
                '#ef4444', '#8b5cf6', '#ec4899', '#14b8a6'
            ];
            
            try {
                // Year Bar Chart
                const yearCtx = document.getElementById('yearBarChart').getContext('2d');
                new Chart(yearCtx, {
                    type: 'bar',
                    data: {
                        labels: chartData.yearData?.labels || [],
                        datasets: [{
                            label: 'Số lượng sách',
                            data: chartData.yearData?.data || [],
                            backgroundColor: chartColors[0],
                            borderColor: chartColors[0],
                            borderWidth: 1,
                            borderRadius: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: { color: '#e2e8f0' }
                            },
                            x: {
                                grid: { display: false }
                            }
                        }
                    }
                });
                
                // Author Chart
                const authorCtx = document.getElementById('authorChart').getContext('2d');
                new Chart(authorCtx, {
                    type: 'bar',
                    data: {
                        labels: chartData.authorData?.labels || [],
                        datasets: [{
                            label: 'Số sách',
                            data: chartData.authorData?.data || [],
                            backgroundColor: chartColors[1],
                            borderColor: chartColors[1],
                            borderWidth: 1,
                            borderRadius: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        indexAxis: 'y',
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            x: {
                                beginAtZero: true,
                                grid: { color: '#e2e8f0' }
                            },
                            y: {
                                grid: { display: false }
                            }
                        }
                    }
                });
                
                // Publisher Doughnut Chart
                const publisherCtx = document.getElementById('publisherChart').getContext('2d');
                new Chart(publisherCtx, {
                    type: 'doughnut',
                    data: {
                        labels: chartData.publisherData?.labels || [],
                        datasets: [{
                            data: chartData.publisherData?.data || [],
                            backgroundColor: chartColors.slice(0, 5),
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
                
                // Category Pie Chart
                const categoryCtx = document.getElementById('categoryChart').getContext('2d');
                new Chart(categoryCtx, {
                    type: 'pie',
                    data: {
                        labels: chartData.categoryData?.labels || [],
                        datasets: [{
                            data: chartData.categoryData?.data || [],
                            backgroundColor: chartColors.slice(0, 6),
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
                
                console.log('All charts created successfully');
                
            } catch (error) {
                console.error('Error creating charts:', error);
                showToast('Lỗi tạo biểu đồ: ' + error.message, 'error');
            }
        }
        
        // Export PDF functionality
        $('#exportPdfBtn').on('click', function() {
            const btn = $(this);
            const originalHtml = btn.html();
            btn.prop('disabled', true).html('<i class="bi bi-arrow-clockwise"></i> Đang xuất...');
            
            try {
                // Create hidden form for POST request
                const form = $('<form>')
                    .attr('method', 'POST')
                    .attr('action', '/Admin/Report?handler=ExportBookPdf')
                    .attr('target', '_blank')
                    .css('display', 'none');
                
                // Add anti-forgery token
                const token = $('input[name="__RequestVerificationToken"]').val();
                form.append($('<input>').attr('type', 'hidden').attr('name', '__RequestVerificationToken').val(token));
                
                $('body').append(form);
                form.submit();
                form.remove();
                
                showToast('Đang tạo báo cáo PDF...', 'info');
            } catch (error) {
                console.error('Export error:', error);
                showToast('Lỗi xuất báo cáo: ' + error.message, 'error');
            }
            
            setTimeout(() => {
                btn.prop('disabled', false).html(originalHtml);
            }, 2000);
        });
        
        // Refresh data
        $('#refreshDataBtn').on('click', function() {
            const btn = $(this);
            const originalHtml = btn.html();
            btn.prop('disabled', true).html('<i class="bi bi-arrow-clockwise"></i> Đang làm mới...');
            
            loadReportData();
            
            setTimeout(() => {
                btn.prop('disabled', false).html(originalHtml);
                showToast('Dữ liệu đã được cập nhật!', 'success');
            }, 1500);
        });
    </script>
}