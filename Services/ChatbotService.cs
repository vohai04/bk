using BookInfoFinder.Services.Interface;
using Microsoft.Extensions.Configuration;
using System.Text.Json;

namespace BookInfoFinder.Services;

public class ChatbotService : IChatbotService
{
    private readonly IBookService _bookService;
    private readonly IRatingService _ratingService;
    private readonly IFavoriteService _favoriteService;
    private readonly ICategoryService _categoryService;
    private readonly IConfiguration _config;
    private readonly string? _geminiKey;

    public ChatbotService(IBookService bookService, IRatingService ratingService, IFavoriteService favoriteService, ICategoryService categoryService, IConfiguration config)
    {
        _bookService = bookService;
        _ratingService = ratingService;
        _favoriteService = favoriteService;
        _categoryService = categoryService;
        _config = config;
        _geminiKey = GetGeminiKey();
    }

    private string? GetGeminiKey()
    {
        var key = _config["Gemini:ApiKey"];
        return (!string.IsNullOrEmpty(key) && key != "AIzaSyDzuwVcd6_UUVrl5SPH69UUhQsMxB1_BCA") ? key : null;
    }

    public async Task<string> GetChatbotReplyAsync(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n s√°ch c·ªßa BookInfoFinder. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ s√°ch, t√°c gi·∫£, th·ªÉ lo·∫°i ho·∫∑c nh·ªù t√¥i g·ª£i √Ω s√°ch hay. üìö";
        }

        try
        {
            string lowerMessage = message.ToLower().Trim();

            // 1. X·ª¨ L√ù CH√ÄO H·ªéI V√Ä GIAO TI·∫æP C∆† B·∫¢N
            if (IsGreeting(lowerMessage))
            {
                return GetGreetingResponse();
            }

            if (IsFarewell(lowerMessage))
            {
                return "T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n. Ch√∫c b·∫°n t√¨m ƒë∆∞·ª£c nh·ªØng cu·ªën s√°ch hay! üëãüìñ";
            }

            if (IsThanking(lowerMessage))
            {
                return "Kh√¥ng c√≥ g√¨! R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n. N·∫øu c·∫ßn th√™m t∆∞ v·∫•n v·ªÅ s√°ch, c·ª© h·ªèi t√¥i nh√©! üòä";
            }

            if (IsQuestion(lowerMessage))
            {
                return await HandleGeneralQuestion(message, lowerMessage);
            }

            // 2. PH√ÇN T√çCH √ù ƒê·ªäNH T√åM KI·∫æM
            var intent = AnalyzeIntent(lowerMessage);

            // 3. X·ª¨ L√ù G·ª¢I √ù S√ÅCH HAY / PH·ªî BI·∫æN
            if (intent.IsRecommendation || intent.IsTrending || intent.IsTopRated || intent.IsNewBooks)
            {
                return await HandleRecommendation(intent, message);
            }

            // 4. X·ª¨ L√ù T√åM KI·∫æM THEO TH·ªÇ LO·∫†I
            if (!string.IsNullOrEmpty(intent.Category))
            {
                return await HandleCategorySearch(intent.Category, message);
            }

            // 5. X·ª¨ L√ù T√åM KI·∫æM THEO T√ÅC GI·∫¢
            if (!string.IsNullOrEmpty(intent.Author))
            {
                return await HandleAuthorSearch(intent.Author);
            }

            // 6. T√åM KI·∫æM TH√îNG MINH V·ªöI GEMINI AI
            if (_geminiKey != null)
            {
                return await HandleAISearch(message, lowerMessage);
            }

            // 7. FALLBACK: T√åM KI·∫æM TRUY·ªÄN TH·ªêNG
            return await HandleFallbackSearch(message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chatbot Error: {ex.Message}");
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi theo c√°ch kh√°c ho·∫∑c t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n trang nh√©! üîç";
        }
    }

    #region Intent Analysis

    private class ChatIntent
    {
        public bool IsRecommendation { get; set; }
        public bool IsTrending { get; set; }
        public bool IsTopRated { get; set; }
        public bool IsNewBooks { get; set; }
        public string? Category { get; set; }
        public string? Author { get; set; }
        public string? Title { get; set; }
    }

    private ChatIntent AnalyzeIntent(string message)
    {
        var intent = new ChatIntent();

        // G·ª£i √Ω / Recommendation keywords
        string[] recommendKeywords = { "g·ª£i √Ω", "gi·ªõi thi·ªáu", "t∆∞ v·∫•n", "ƒë·ªÅ xu·∫•t", "n√™n ƒë·ªçc", "s√°ch hay", "s√°ch n√†o hay", "s√°ch t·ªët", "ƒë√°ng ƒë·ªçc" };
        intent.IsRecommendation = recommendKeywords.Any(k => message.Contains(k));

        // Trending keywords
        string[] trendingKeywords = { "trending", "xu h∆∞·ªõng", "y√™u th√≠ch", "ph·ªï bi·∫øn", "hot", "n·ªïi b·∫≠t", "ƒë∆∞·ª£c ∆∞a chu·ªông", "ƒë∆∞·ª£c y√™u th√≠ch nhi·ªÅu", "y√™u th√≠ch nhi·ªÅu", "hot nh·∫•t", "ph·ªï bi·∫øn nh·∫•t" };
        intent.IsTrending = trendingKeywords.Any(k => message.Contains(k));

        // Top rated keywords
        string[] topRatedKeywords = { "ƒë√°nh gi√° cao", "x·∫øp h·∫°ng cao", "rating", "ƒëi·ªÉm cao", "n·ªïi ti·∫øng" };
        intent.IsTopRated = topRatedKeywords.Any(k => message.Contains(k));

        // New books keywords
        string[] newBooksKeywords = { "m·ªõi", "m·ªõi ra m·∫Øt", "m·ªõi nh·∫•t", "g·∫ßn ƒë√¢y", "recent", "new", "s·∫£n xu·∫•t m·ªõi" };
        intent.IsNewBooks = newBooksKeywords.Any(k => message.Contains(k));

        // Extract category
        if (message.Contains("th·ªÉ lo·∫°i") || message.Contains("genre") || message.Contains("lo·∫°i s√°ch"))
        {
            var parts = message.Split(new[] { "th·ªÉ lo·∫°i", "genre", "lo·∫°i s√°ch" }, StringSplitOptions.None);
            if (parts.Length > 1)
            {
                intent.Category = parts[1].Trim().Split(' ').FirstOrDefault()?.Trim(',', '.', '?', '!');
            }
        }
        else
        {
            // Nh·∫≠n di·ªán th·ªÉ lo·∫°i tr·ª±c ti·∫øp
            string[] categoryKeywords = { "khoa h·ªçc", "ti·ªÉu thuy·∫øt", "trinh th√°m", "kinh d·ªã", "l√£ng m·∫°n", "vƒÉn h·ªçc", "self-help", "t·ª± ph√°t tri·ªÉn", "kinh doanh", "l·ªãch s·ª≠", "thi·∫øu nhi", "truy·ªán tranh", "manga", "light novel" };
            foreach (var keyword in categoryKeywords)
            {
                if (message.Contains(keyword))
                {
                    intent.Category = keyword;
                    break;
                }
            }
        }

        // Extract author
        if (message.Contains("t√°c gi·∫£") || message.Contains("author") || message.Contains("c·ªßa"))
        {
            var parts = message.Split(new[] { "t√°c gi·∫£", "author", "c·ªßa" }, StringSplitOptions.None);
            if (parts.Length > 1)
            {
                intent.Author = parts[1].Trim().Split(' ', 3).Take(3).Aggregate((a, b) => a + " " + b).Trim(',', '.', '?', '!');
            }
        }

        return intent;
    }

    private bool IsGreeting(string message)
    {
        string[] greetings = { "xin ch√†o", "ch√†o", "hello", "hi", "hey", "h·∫ø nh√¥", "h·∫ø l√¥", "ch√†o b·∫°n", "ch√†o bot" };
        return greetings.Any(g => message.StartsWith(g) || message == g);
    }

    private bool IsFarewell(string message)
    {
        string[] farewells = { "t·∫°m bi·ªát", "bye", "goodbye", "h·∫πn g·∫∑p l·∫°i", "th√¥i", "tho√°t", "k·∫øt th√∫c" };
        return farewells.Any(f => message.Contains(f));
    }

    private bool IsThanking(string message)
    {
        string[] thanks = { "c·∫£m ∆°n", "c√°m ∆°n", "thank", "thanks", "c·∫£m ∆°n b·∫°n", "c·∫£m ∆°n bot" };
        return thanks.Any(t => message.Contains(t));
    }

    private bool IsQuestion(string message)
    {
        string[] questionWords = { "l√† g√¨", "nh∆∞ th·∫ø n√†o", "th·∫ø n√†o", "t·∫°i sao", "v√¨ sao", "c√≥ th·ªÉ", "c√≥", "bao nhi√™u", "khi n√†o" };
        return message.EndsWith("?") || questionWords.Any(q => message.Contains(q));
    }

    private string GetGreetingResponse()
    {
        string[] responses = {
            "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa BookInfoFinder. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch, g·ª£i √Ω s√°ch hay, ho·∫∑c t∆∞ v·∫•n v·ªÅ t√°c gi·∫£ v√† th·ªÉ lo·∫°i. B·∫°n mu·ªën t√¨m g√¨ h√¥m nay?",
            "Ch√†o b·∫°n! üòä R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. H√£y cho t√¥i bi·∫øt b·∫°n ƒëang t√¨m ki·∫øm lo·∫°i s√°ch n√†o, t√¥i s·∫Ω gi√∫p b·∫°n t√¨m nh·ªØng cu·ªën s√°ch ph√π h·ª£p nh·∫•t!",
            "Hello! üìö T√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√°m ph√° th·∫ø gi·ªõi s√°ch. B·∫°n mu·ªën ƒë·ªçc th·ªÉ lo·∫°i g√¨? Ho·∫∑c c√≥ t√°c gi·∫£ y√™u th√≠ch n√†o kh√¥ng?"
        };
        return responses[new Random().Next(responses.Length)];
    }

    #endregion

    #region Handler Methods

    private async Task<string> HandleGeneralQuestion(string message, string lowerMessage)
    {
        if (lowerMessage.Contains("b·∫°n l√† ai") || lowerMessage.Contains("b·∫°n l√† g√¨"))
        {
            return "T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa BookInfoFinder, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm v√† kh√°m ph√° s√°ch. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n s√°ch d·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, gi·ªõi thi·ªáu s√°ch hay, v√† tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ s√°ch, t√°c gi·∫£, th·ªÉ lo·∫°i. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ s√°ch nh√©! üìñ‚ú®";
        }

        if (lowerMessage.Contains("l√†m ƒë∆∞·ª£c g√¨") || lowerMessage.Contains("gi√∫p g√¨"))
        {
            return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                   "üìö T√¨m s√°ch theo t√™n, t√°c gi·∫£, ho·∫∑c th·ªÉ lo·∫°i\n" +
                   "‚≠ê G·ª£i √Ω s√°ch ƒë√°nh gi√° cao nh·∫•t\n" +
                   "‚ù§Ô∏è Gi·ªõi thi·ªáu s√°ch ƒë∆∞·ª£c y√™u th√≠ch nhi·ªÅu\n" +
                   "üî• T∆∞ v·∫•n s√°ch ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n\n" +
                   "üí° Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ s√°ch, t√°c gi·∫£, th·ªÉ lo·∫°i\n\n" +
                   "H√£y th·ª≠ h·ªèi t√¥i: 'g·ª£i √Ω s√°ch hay', 's√°ch khoa h·ªçc', ho·∫∑c 't√°c gi·∫£ Nguy·ªÖn Nh·∫≠t √Ånh'!";
        }

        // Use AI to answer other questions if available
        if (_geminiKey != null)
        {
            return await HandleAISearch(message, lowerMessage);
        }

        return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s√°ch, t√°c gi·∫£, ho·∫∑c nh·ªù t√¥i g·ª£i √Ω s√°ch hay kh√¥ng? ü§î";
    }

    private async Task<string> HandleRecommendation(ChatIntent intent, string message)
    {
        if (intent.IsTopRated)
        {
            var (books, total) = await _ratingService.GetTopRatedBooksPagedAsync(1, 5);
            if (total > 0)
            {
                var bookList = books.Take(3).Select(b => $"üìñ {b.Title} - {b.AverageRating:F1}‚≠ê ({b.RatingCount} ƒë√°nh gi√°)").ToList();
                return $"D∆∞·ªõi ƒë√¢y l√† {total} cu·ªën s√°ch c√≥ ƒë√°nh gi√° cao nh·∫•t:\n\n" +
                       string.Join("\n", bookList) +
                       (total > 3 ? $"\n\n...v√† c√≤n {total - 3} cu·ªën kh√°c n·ªØa!" : "") +
                       "\n\nB·∫°n c√≥ th·ªÉ t√¨m ki·∫øm tr·ª±c ti·∫øp ƒë·ªÉ xem chi ti·∫øt nh√©! üîç";
            }
        }

        if (intent.IsTrending)
        {
            var (books, total) = await _favoriteService.GetMostFavoritedBooksPagedAsync(1, 5);
            if (total > 0)
            {
                var bookList = books.Take(3).Select(b => $"‚ù§Ô∏è {b.Title}").ToList();
                return $"C√°c cu·ªën s√°ch ƒëang ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t:\n\n" +
                       string.Join("\n", bookList) +
                       (total > 3 ? $"\n\n...v√† c√≤n {total - 3} cu·ªën n·ªØa!" : "") +
                       "\n\nƒê√¢y l√† nh·ªØng cu·ªën ƒëang 'hot' ƒë·∫•y! üî•";
            }
        }

        if (intent.IsNewBooks)
        {
            var (books, total) = await _bookService.SearchBooksWithStatsPagedAsync(null, null, null, null, 1, 5, "PublicationDate desc");
            if (total > 0)
            {
                var bookList = books.Take(3).Select(b => $"üìñ {b.Title} - {b.AuthorName ?? "Kh√¥ng r√µ"} ({b.PublicationDate.Year})").ToList();
                return $"S√°ch m·ªõi ra m·∫Øt g·∫ßn ƒë√¢y:\n\n" +
                       string.Join("\n", bookList) +
                       (total > 3 ? $"\n\n...v√† c√≤n {total - 3} cu·ªën n·ªØa!" : "") +
                       "\n\nB·∫°n c√≥ th·ªÉ t√¨m ki·∫øm ƒë·ªÉ xem th√™m! üÜï";
            }
        }

        // General recommendation
        var (topBooks, topTotal) = await _ratingService.GetTopRatedBooksPagedAsync(1, 5);
        if (topTotal > 0)
        {
            var bookList = topBooks.Take(3).Select(b => $"üìö {b.Title} - {b.AverageRating:F1}‚≠ê").ToList();
            return "T√¥i g·ª£i √Ω nh·ªØng cu·ªën s√°ch hay n√†y cho b·∫°n:\n\n" +
                   string.Join("\n", bookList) +
                   "\n\nƒê√¢y l√† nh·ªØng cu·ªën c√≥ ƒë√°nh gi√° t·ªët nh·∫•t t·ª´ c·ªông ƒë·ªìng ƒë·ªôc gi·∫£! üíØ";
        }

        return "Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu ƒë√°nh gi√°. B·∫°n th·ª≠ t√¨m theo th·ªÉ lo·∫°i ho·∫∑c t√°c gi·∫£ y√™u th√≠ch nh√©! üìñ";
    }

    private async Task<string> HandleCategorySearch(string category, string fullMessage)
    {
        var (books, total) = await _bookService.SearchBooksWithStatsPagedAsync(null, null, category, null, 1, 5, null);
        
        if (total > 0)
        {
            var bookList = books.Take(3).Select(b => $"üìñ {b.Title} - {b.AuthorName ?? "Kh√¥ng r√µ t√°c gi·∫£"}").ToList();
            return $"Trong th·ªÉ lo·∫°i '{category}', t√¥i t√¨m th·∫•y {total} cu·ªën s√°ch:\n\n" +
                   string.Join("\n", bookList) +
                   (total > 3 ? $"\n\n...v√† c√≤n {total - 3} cu·ªën n·ªØa!" : "") +
                   "\n\nB·∫°n mu·ªën xem chi ti·∫øt cu·ªën n√†o kh√¥ng? üîç";
        }

        // Suggest similar categories using AI
        if (_geminiKey != null)
        {
            var categories = await _categoryService.GetAllCategoriesAsync();
            var categoryNames = categories.Select(c => c.Name).ToList();
            string context = $"Database c√≥ c√°c th·ªÉ lo·∫°i: {string.Join(", ", categoryNames)}";
            string prompt = $"{context}\n\nNg∆∞·ªùi d√πng t√¨m '{category}' nh∆∞ng kh√¥ng c√≥. H√£y g·ª£i √Ω 2-3 th·ªÉ lo·∫°i t∆∞∆°ng t·ª± t·ª´ danh s√°ch tr√™n. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát.";
            
            var aiResponse = await CallGemini(prompt, _geminiKey);
            return $"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s√°ch n√†o trong th·ªÉ lo·∫°i '{category}'. üòî\n\n{aiResponse}";
        }

        var allCategories = await _categoryService.GetAllCategoriesAsync();
        var availableCategories = string.Join(", ", allCategories.Select(c => c.Name).Take(5));
        return $"Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i '{category}'. C√°c th·ªÉ lo·∫°i c√≥ s·∫µn: {availableCategories}... üìö";
    }

    private async Task<string> HandleAuthorSearch(string author)
    {
        var (books, total) = await _bookService.SearchBooksWithStatsPagedAsync(null, author, null, null, 1, 5, null);
        
        if (total > 0)
        {
            var bookList = books.Take(3).Select(b => $"üìñ {b.Title}").ToList();
            return $"T√°c gi·∫£ '{author}' c√≥ {total} cu·ªën s√°ch trong h·ªá th·ªëng:\n\n" +
                   string.Join("\n", bookList) +
                   (total > 3 ? $"\n\n...v√† c√≤n {total - 3} cu·ªën n·ªØa!" : "") +
                   "\n\nB·∫°n c√≥ th·ªÉ t√¨m ki·∫øm ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß! üîé";
        }

        return $"R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y s√°ch n√†o c·ªßa t√°c gi·∫£ '{author}' trong h·ªá th·ªëng. B·∫°n c√≥ th·ªÉ th·ª≠ t√™n t√°c gi·∫£ kh√°c ho·∫∑c t√¨m theo th·ªÉ lo·∫°i nh√©! ‚úçÔ∏è";
    }

    private async Task<string> HandleAISearch(string message, string lowerMessage)
    {
        // Get context from database
        var (books, total) = await _bookService.SearchBooksAdminPagedAsync(message, null, null, null, 1, 8, null);
        
        string context = "Th√¥ng tin t·ª´ database BookInfoFinder:\n";
        if (total > 0)
        {
            foreach (var book in books.Take(5))
            {
                context += $"- '{book.Title}' c·ªßa {book.AuthorName ?? "Kh√¥ng r√µ t√°c gi·∫£"}, th·ªÉ lo·∫°i {book.CategoryName ?? "Kh√¥ng r√µ"}, m√¥ t·∫£: {book.Description ?? "Kh√¥ng c√≥"}.\n";
            }
        }
        else
        {
            context += "Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p v·ªõi t·ª´ kh√≥a tr·ª±c ti·∫øp.\n";
        }

        // Get categories for context
        var categories = await _categoryService.GetAllCategoriesAsync();
        context += $"\nC√°c th·ªÉ lo·∫°i c√≥ s·∫µn: {string.Join(", ", categories.Select(c => c.Name).Take(10))}";

        string systemPrompt = @"B·∫°n l√† tr·ª£ l√Ω ·∫£o th√¢n thi·ªán v√† chuy√™n nghi·ªáp c·ªßa BookInfoFinder, m·ªôt website t√¨m ki·∫øm s√°ch.

NHI·ªÜM V·ª§:
- T∆∞ v·∫•n s√°ch d·ª±a tr√™n database ƒë∆∞·ª£c cung c·∫•p
- Tr·∫£ l·ªùi th√¢n thi·ªán, nhi·ªát t√¨nh, d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ sinh ƒë·ªông
- N·∫øu kh√¥ng c√≥ s√°ch ph√π h·ª£p, g·ª£i √Ω c√°c l·ª±a ch·ªçn t∆∞∆°ng t·ª±
- Lu√¥n khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n website

QUY T·∫ÆC:
‚úÖ Tr·∫£ l·ªùi ng·∫Øn g·ªçn (3-5 c√¢u)
‚úÖ ∆Øu ti√™n s√°ch c√≥ trong database
‚úÖ S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n
‚úÖ Th√™m emoji ƒë·ªÉ th√¢n thi·ªán
‚ùå Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin
‚ùå Kh√¥ng tr·∫£ l·ªùi d√†i d√≤ng
‚ùå Kh√¥ng n√≥i v·ªÅ nh·ªØng g√¨ kh√¥ng li√™n quan ƒë·∫øn s√°ch";

        string prompt = $"{systemPrompt}\n\n{context}\n\nNg∆∞·ªùi d√πng: {message}\n\nH√£y t∆∞ v·∫•n m·ªôt c√°ch h·ªØu √≠ch v√† th√¢n thi·ªán:";
        
        var reply = await CallGemini(prompt, _geminiKey!);
        
        // Add a call-to-action if books were found
        if (total > 0 && !reply.Contains("t√¨m ki·∫øm") && !reply.Contains("üîç"))
        {
            reply += "\n\nüîç B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm tr·ª±c ti·∫øp ƒë·ªÉ xem chi ti·∫øt v√† ƒë√°nh gi√° nh√©!";
        }
        
        return reply;
    }

    private async Task<string> HandleFallbackSearch(string message)
    {
        // Try title search
        var (booksByTitle, totalTitle) = await _bookService.SearchBooksWithStatsPagedAsync(message, null, null, null, 1, 5, null);
        
        if (totalTitle > 0)
        {
            var bookList = booksByTitle.Take(3).Select(b => $"üìñ {b.Title} - {b.AuthorName ?? "Kh√¥ng r√µ"}").ToList();
            return $"T√¥i t√¨m th·∫•y {totalTitle} cu·ªën s√°ch li√™n quan:\n\n" +
                   string.Join("\n", bookList) +
                   (totalTitle > 3 ? $"\n\n...v√† c√≤n {totalTitle - 3} cu·ªën n·ªØa!" : "") +
                   "\n\nB·∫°n c√≥ th·ªÉ t√¨m ki·∫øm chi ti·∫øt h∆°n nh√©! üîç";
        }

        // Try author search
        var (booksByAuthor, totalAuthor) = await _bookService.SearchBooksWithStatsPagedAsync(null, message, null, null, 1, 5, null);
        
        if (totalAuthor > 0)
        {
            var bookList = booksByAuthor.Take(3).Select(b => $"üìñ {b.Title}").ToList();
            return $"T√¥i t√¨m th·∫•y {totalAuthor} cu·ªën s√°ch c·ªßa t√°c gi·∫£ li√™n quan:\n\n" +
                   string.Join("\n", bookList) +
                   "\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ cu·ªën n√†o kh√¥ng? üìö";
        }

        // Try category search
        var (booksByCategory, totalCategory) = await _bookService.SearchBooksWithStatsPagedAsync(null, null, message, null, 1, 5, null);
        
        if (totalCategory > 0)
        {
            var bookList = booksByCategory.Take(3).Select(b => $"üìñ {b.Title}").ToList();
            return $"Trong th·ªÉ lo·∫°i li√™n quan, t√¥i t√¨m th·∫•y {totalCategory} cu·ªën:\n\n" +
                   string.Join("\n", bookList) +
                   "\n\nB·∫°n c√≥ th·ªÉ xem th√™m b·∫±ng c√°ch t√¨m ki·∫øm! üîé";
        }

        return $"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s√°ch n√†o v·ªõi t·ª´ kh√≥a '{message}'. üòî\n\n" +
               "B·∫°n c√≥ th·ªÉ th·ª≠:\n" +
               "üí° G√µ t√™n s√°ch ch√≠nh x√°c h∆°n\n" +
               "üí° T√¨m theo t√™n t√°c gi·∫£\n" +
               "üí° T√¨m theo th·ªÉ lo·∫°i nh∆∞ 'khoa h·ªçc', 'ti·ªÉu thuy·∫øt'\n" +
               "üí° H·ªèi t√¥i 'g·ª£i √Ω s√°ch hay'\n\n" +
               "T√¥i lu√¥n s·∫µn s√†ng gi√∫p b·∫°n! üòä";
    }

    #endregion

    #region Gemini API

    private async Task<string> CallGemini(string prompt, string key)
    {
        try
        {
            using var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(15);
            
            var payload = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = prompt }
                        }
                    }
                },
                generationConfig = new
                {
                    temperature = 0.7,
                    maxOutputTokens = 500,
                    topP = 0.95,
                    topK = 40
                }
            };

            var response = await client.PostAsJsonAsync(
                $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={key}", 
                payload
            );

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JsonElement>();
                
                try
                {
                    var text = result
                        .GetProperty("candidates")[0]
                        .GetProperty("content")
                        .GetProperty("parts")[0]
                        .GetProperty("text")
                        .GetString();
                    
                    return text ?? "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi l√∫c n√†y.";
                }
                catch
                {
                    return "Xin l·ªói, c√≥ l·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i! ü§ñ";
                }
            }

            return "Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI l√∫c n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m ki·∫øm tr·ª±c ti·∫øp nh√©! üîç";
        }
        catch (TaskCanceledException)
        {
            return "Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. B·∫°n th·ª≠ l·∫°i ho·∫∑c t√¨m ki·∫øm tr·ª±c ti·∫øp nh√©! ‚è±Ô∏è";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gemini API Error: {ex.Message}");
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. H√£y th·ª≠ t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n trang! üîç";
        }
    }

    #endregion
}