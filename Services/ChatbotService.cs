using BookInfoFinder.Services.Interface;
using Microsoft.Extensions.Configuration;
using System.Text.Json;
using System.Collections.Concurrent;
using BookInfoFinder.Models.Dto;

namespace BookInfoFinder.Services;

public class ChatbotService : IChatbotService
{
    private readonly IBookService _bookService;
    private readonly IRatingService _ratingService;
    private readonly IFavoriteService _favoriteService;
    private readonly ICategoryService _categoryService;
    private readonly IConfiguration _config;
    private readonly string? _geminiKey;
    
    // L∆∞u tr·ªØ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán theo session
    private static readonly ConcurrentDictionary<string, ConversationContext> _conversations = new();

    public ChatbotService(IBookService bookService, IRatingService ratingService, 
        IFavoriteService favoriteService, ICategoryService categoryService, IConfiguration config)
    {
        _bookService = bookService;
        _ratingService = ratingService;
        _favoriteService = favoriteService;
        _categoryService = categoryService;
        _config = config;
        _geminiKey = GetGeminiKey();
    }

    private string? GetGeminiKey()
    {
        var key = _config["Gemini:ApiKey"];
        Console.WriteLine($"Gemini API Key loaded: {(string.IsNullOrEmpty(key) ? "NULL/EMPTY" : "PRESENT")}");
        return (!string.IsNullOrEmpty(key) ) ? key : null;
    }

    public async Task<string> GetChatbotReplyAsync(string message)
    {
        return await GetChatbotReplyAsync(message, null);
    }

    public async Task<string> GetChatbotReplyAsync(string message, string? sessionId = null)
    {
        sessionId ??= "default";
        
        if (string.IsNullOrWhiteSpace(message))
        {
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n s√°ch c·ªßa BookInfoFinder. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ s√°ch, t√°c gi·∫£, th·ªÉ lo·∫°i ho·∫∑c nh·ªù t√¥i g·ª£i √Ω s√°ch hay. üìö";
        }

        try
        {
            // L·∫•y ho·∫∑c t·∫°o context cho session
            var context = _conversations.GetOrAdd(sessionId, _ => new ConversationContext());
            context.AddMessage("user", message);

            string lowerMessage = message.ToLower().Trim();

            // X·ª≠ l√Ω ch√†o h·ªèi c∆° b·∫£n
            if (IsGreeting(lowerMessage) && context.MessageCount <= 1)
            {
                var greeting = GetGreetingResponse();
                context.AddMessage("assistant", greeting);
                return greeting;
            }

            if (IsFarewell(lowerMessage))
            {
                var farewell = "T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n. Ch√∫c b·∫°n t√¨m ƒë∆∞·ª£c nh·ªØng cu·ªën s√°ch hay! üëãüìñ";
                context.Clear(); // X√≥a ng·ªØ c·∫£nh khi t·∫°m bi·ªát
                return farewell;
            }

            if (IsThanking(lowerMessage))
            {
                return "Kh√¥ng c√≥ g√¨! R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n. N·∫øu c·∫ßn th√™m t∆∞ v·∫•n v·ªÅ s√°ch, c·ª© h·ªèi t√¥i nh√©! üòä";
            }

            // S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch v√† tr·∫£ l·ªùi v·ªõi context
            if (_geminiKey != null)
            {
                return await HandleAIConversation(message, context);
            }

            return "Xin l·ªói, chatbot c·∫ßn API key ƒë·ªÉ ho·∫°t ƒë·ªông t·ªët nh·∫•t. B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n trang! üîç";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chatbot Error: {ex.Message}");
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi theo c√°ch kh√°c ho·∫∑c t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n trang nh√©! üîç";
        }
    }

    private async Task<string> HandleAIConversation(string userMessage, ConversationContext context)
    {
        // B∆∞·ªõc 1: AI ph√¢n t√≠ch √Ω ƒë·ªãnh v√† truy v·∫•n database
        var analysisResult = await AnalyzeUserIntentWithAI(userMessage, context);
        
        // B∆∞·ªõc 2: Th·ª±c hi·ªán truy v·∫•n database d·ª±a tr√™n ph√¢n t√≠ch
        var databaseResults = await QueryDatabase(analysisResult);
        
        // B∆∞·ªõc 3: AI t·∫°o c√¢u tr·∫£ l·ªùi t·ª± nhi√™n d·ª±a tr√™n k·∫øt qu·∫£
        var response = await GenerateResponse(userMessage, context, databaseResults);
        
        context.AddMessage("assistant", response);
        return response;
    }

    private async Task<IntentAnalysis> AnalyzeUserIntentWithAI(string message, ConversationContext context)
    {
        string conversationHistory = context.GetFormattedHistory(5); // L·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
        
        string analysisPrompt = $@"B·∫°n l√† AI ph√¢n t√≠ch √Ω ƒë·ªãnh ng∆∞·ªùi d√πng trong h·ªá th·ªëng t√¨m ki·∫øm s√°ch.

L·ªäCH S·ª¨ H·ªòI THO·∫†I:
{conversationHistory}

TIN NH·∫ÆN M·ªöI: ""{message}""

NHI·ªÜM V·ª§: Ph√¢n t√≠ch √Ω ƒë·ªãnh v√† ƒë∆∞a ra c√¢u l·ªánh truy v·∫•n database.

Tr·∫£ v·ªÅ JSON v·ªõi format sau:
{{
  ""intent"": ""search_book|search_author|search_category|recommend|ask_about_book|ask_about_author|follow_up|general_chat"",
  ""query_type"": ""title|author|category|rating|favorite|new|mixed"",
  ""search_params"": {{
    ""title"": ""t√™n s√°ch n·∫øu c√≥"",
    ""author"": ""t√™n t√°c gi·∫£ n·∫øu c√≥"",
    ""category"": ""th·ªÉ lo·∫°i n·∫øu c√≥"",
    ""book_mentioned"": ""t√™n s√°ch ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong l·ªãch s·ª≠ chat""
  }},
  ""context_reference"": ""t√™n s√°ch/t√°c gi·∫£ t·ª´ tin nh·∫Øn tr∆∞·ªõc n·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi ti·∫øp"",
  ""explanation"": ""gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ √Ω ƒë·ªãnh ng∆∞·ªùi d√πng""
}}

CH√ö √ù:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi ti·∫øp v·ªÅ ""s√°ch ƒë√≥"", ""cu·ªën n√†y"", ""t√°c gi·∫£ ·∫•y"" => l·∫•y th√¥ng tin t·ª´ l·ªãch s·ª≠
- N·∫øu h·ªèi v·ªÅ th·ªÉ lo·∫°i, t√°c gi·∫£ c·ªßa s√°ch v·ª´a nh·∫Øc => ƒëi·ªÅn book_mentioned
- Ph√¢n bi·ªát r√µ gi·ªØa t√¨m s√°ch M·ªöI vs h·ªèi th√™m v·ªÅ s√°ch ƒê√É NH·∫ÆC

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c.";

        try
        {
            var aiResponse = await CallGemini(analysisPrompt, _geminiKey!);
            
            // Parse JSON response
            var jsonStart = aiResponse.IndexOf('{');
            var jsonEnd = aiResponse.LastIndexOf('}');
            if (jsonStart >= 0 && jsonEnd > jsonStart)
            {
                var json = aiResponse.Substring(jsonStart, jsonEnd - jsonStart + 1);
                var analysis = JsonSerializer.Deserialize<IntentAnalysis>(json, new JsonSerializerOptions 
                { 
                    PropertyNameCaseInsensitive = true 
                });
                
                if (analysis != null)
                {
                    Console.WriteLine($"AI Analysis: {analysis.Explanation}");
                    return analysis;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Intent Analysis Error: {ex.Message}");
        }

        // Fallback: ph√¢n t√≠ch ƒë∆°n gi·∫£n
        return new IntentAnalysis
        {
            Intent = "search_book",
            QueryType = "mixed",
            SearchParams = new SearchParams { Title = message },
            Explanation = "Fallback search"
        };
    }

    private async Task<DatabaseResults> QueryDatabase(IntentAnalysis analysis)
    {
        var results = new DatabaseResults();

        try
        {
            var searchParams = analysis.SearchParams;
            
            // X√°c ƒë·ªãnh s√°ch ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn t·ª´ context
            string? bookTitle = searchParams.BookMentioned ?? searchParams.Title;
            string? author = searchParams.Author;
            string? category = searchParams.Category;

            // Query books
            if (!string.IsNullOrEmpty(bookTitle) || !string.IsNullOrEmpty(author) || !string.IsNullOrEmpty(category))
            {
                var (books, total) = await _bookService.SearchBooksWithStatsPagedAsync(
                    bookTitle, author, category, null, 1, 10, null);
                
                results.Books = books.ToList();
                results.TotalBooks = total;
            }

            // N·∫øu h·ªèi v·ªÅ rating/trending
            if (analysis.QueryType.Contains("rating"))
            {
                var (topBooks, total) = await _ratingService.GetTopRatedBooksPagedAsync(1, 10);
                results.TopRatedBooks = topBooks.ToList();
            }

            if (analysis.QueryType.Contains("favorite"))
            {
                var (favBooks, total) = await _favoriteService.GetMostFavoritedBooksPagedAsync(1, 10);
                results.TrendingBooks = favBooks.ToList();
            }

            // L·∫•y categories ƒë·ªÉ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß
            results.AllCategories = (await _categoryService.GetAllCategoriesAsync()).ToList();

            // N·∫øu c√≥ s√°ch c·ª• th·ªÉ, l·∫•y th√¥ng tin chi ti·∫øt
            if (results.Books.Any() && (analysis.Intent == "ask_about_book" || analysis.Intent == "follow_up"))
            {
                var firstBook = results.Books.First();
                results.FocusedBook = firstBook;
                
                // T√¨m s√°ch c√πng th·ªÉ lo·∫°i
                if (!string.IsNullOrEmpty(firstBook.CategoryName))
                {
                    var (relatedBooks, _) = await _bookService.SearchBooksWithStatsPagedAsync(
                        null, null, firstBook.CategoryName, null, 1, 5, null);
                    results.RelatedBooks = relatedBooks.Where(b => b.BookId != firstBook.BookId).ToList();
                }
                
                // T√¨m s√°ch c√πng t√°c gi·∫£
                if (!string.IsNullOrEmpty(firstBook.AuthorName))
                {
                    var (authorBooks, _) = await _bookService.SearchBooksWithStatsPagedAsync(
                        null, firstBook.AuthorName, null, null, 1, 5, null);
                    results.AuthorBooks = authorBooks.Where(b => b.BookId != firstBook.BookId).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Database Query Error: {ex.Message}");
        }

        return results;
    }

    private async Task<string> GenerateResponse(string userMessage, ConversationContext context, DatabaseResults dbResults)
    {
        string conversationHistory = context.GetFormattedHistory(5);
        
        string dataContext = BuildDataContext(dbResults);
        
        string systemPrompt = @"B·∫°n l√† tr·ª£ l√Ω s√°ch th√¢n thi·ªán v√† th√¥ng minh c·ªßa BookInfoFinder.

T√çNH C√ÅCH:
- Th√¢n thi·ªán, nhi·ªát t√¨nh, g·∫ßn g≈©i nh∆∞ ng∆∞·ªùi b·∫°n
- Nh·ªõ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán v√† ti·∫øp t·ª•c t·ª± nhi√™n
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ sinh ƒë·ªông
- Kh√¥ng l·∫∑p l·∫°i th√¥ng tin ƒë√£ n√≥i tr∆∞·ªõc ƒë√≥
- Gi·ªçng ƒëi·ªáu t·ª± nhi√™n, kh√¥ng m√°y m√≥c

K·ª∏ NƒÇNG:
‚úÖ Nh·ªõ s√°ch v·ª´a nh·∫Øc ƒë·∫øn v√† tr·∫£ l·ªùi c√¢u h·ªèi ti·∫øp theo v·ªÅ s√°ch ƒë√≥
‚úÖ Hi·ªÉu c√¢u h·ªèi m∆° h·ªì nh∆∞ ""s√°ch ƒë√≥"", ""t√°c gi·∫£ ·∫•y"", ""th·ªÉ lo·∫°i g√¨""
‚úÖ G·ª£i √Ω s√°ch li√™n quan th√¥ng minh (c√πng t√°c gi·∫£, c√πng th·ªÉ lo·∫°i)
‚úÖ Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch (2-4 c√¢u)
‚úÖ Lu√¥n khuy·∫øn kh√≠ch kh√°m ph√° th√™m

QUY T·∫ÆC:
‚ùå KH√îNG l·∫∑p l·∫°i th√¥ng tin ƒë√£ n√≥i
‚ùå KH√îNG li·ªát k√™ d√†i d√≤ng
‚ùå KH√îNG n√≥i ""theo database"" hay ""h·ªá th·ªëng""
‚ùå KH√îNG b·ªãa ƒë·∫∑t th√¥ng tin
‚úÖ N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, g·ª£i √Ω thay th·∫ø
‚úÖ Lu√¥n duy tr√¨ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán";

        string prompt = $@"{systemPrompt}

L·ªäCH S·ª¨ H·ªòI THO·∫†I:
{conversationHistory}

D·ªÆ LI·ªÜU T·ª™ DATABASE:
{dataContext}

NG∆Ø·ªúI D√ôNG V·ª™A H·ªéI: ""{userMessage}""

H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán v√† ti·∫øp n·ªëi cu·ªôc tr√≤ chuy·ªán. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s√°ch v·ª´a nh·∫Øc, tr·∫£ l·ªùi tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn nh·∫Øc l·∫°i t√™n s√°ch.";

        try
        {
            var response = await CallGemini(prompt, _geminiKey!);
            
            // L√†m s·∫°ch response
            response = response.Trim();
            
            // Th√™m call-to-action n·∫øu ph√π h·ª£p
            if (dbResults.Books.Any() && !response.Contains("üîç") && !response.Contains("t√¨m ki·∫øm"))
            {
                if (new Random().Next(100) < 30) // 30% chance
                {
                    response += "\n\nüîç B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm ƒë·ªÉ xem chi ti·∫øt nh√©!";
                }
            }
            
            return response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Response Generation Error: {ex.Message}");
            return "Xin l·ªói, t√¥i g·∫∑p ch√∫t v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i ƒë∆∞·ª£c kh√¥ng? üòÖ";
        }
    }

    private string BuildDataContext(DatabaseResults results)
    {
        var context = "";

        if (results.FocusedBook != null)
        {
            var book = results.FocusedBook;
            context += $"üìñ S√ÅCH ƒêANG B√ÄN: '{book.Title}'\n";
            context += $"   - T√°c gi·∫£: {book.AuthorName ?? "Kh√¥ng r√µ"}\n";
            context += $"   - Th·ªÉ lo·∫°i: {book.CategoryName ?? "Kh√¥ng r√µ"}\n";
            if (book.AverageRating > 0)
                context += $"   - ƒê√°nh gi√°: {book.AverageRating:F1}‚≠ê ({book.RatingCount} l∆∞·ª£t)\n";
            context += "\n";
        }

        if (results.Books.Any() && results.FocusedBook == null)
        {
            context += $"üìö T√åM TH·∫§Y {results.TotalBooks} S√ÅCH:\n";
            foreach (var book in results.Books.Take(5))
            {
                context += $"   - '{book.Title}' - {book.AuthorName ?? "?"} ({book.CategoryName ?? "?"})\n";
            }
            context += "\n";
        }

        if (results.AuthorBooks.Any())
        {
            context += $"‚úçÔ∏è S√ÅCH C√ôNG T√ÅC GI·∫¢ ({results.AuthorBooks.Count} cu·ªën):\n";
            foreach (var book in results.AuthorBooks.Take(3))
            {
                context += $"   - '{book.Title}'\n";
            }
            context += "\n";
        }

        if (results.RelatedBooks.Any())
        {
            context += $"üîó S√ÅCH C√ôNG TH·ªÇ LO·∫†I ({results.RelatedBooks.Count} cu·ªën):\n";
            foreach (var book in results.RelatedBooks.Take(3))
            {
                context += $"   - '{book.Title}' - {book.AuthorName ?? "?"}\n";
            }
            context += "\n";
        }

        if (results.TopRatedBooks.Any())
        {
            context += $"‚≠ê TOP S√ÅCH ƒê√ÅNH GI√Å CAO:\n";
            foreach (var book in results.TopRatedBooks.Take(3))
            {
                context += $"   - '{book.Title}' - {book.AverageRating:F1}‚≠ê\n";
            }
            context += "\n";
        }

        if (results.TrendingBooks.Any())
        {
            context += $"üî• S√ÅCH HOT:\n";
            foreach (var book in results.TrendingBooks.Take(3))
            {
                context += $"   - '{book.Title}'\n";
            }
            context += "\n";
        }

        if (results.AllCategories.Any())
        {
            context += $"üìë C√ÅC TH·ªÇ LO·∫†I: {string.Join(", ", results.AllCategories.Select(c => c.Name).Take(10))}\n";
        }

        if (string.IsNullOrEmpty(context))
        {
            context = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p trong database.\n";
        }

        return context;
    }

    #region Helper Methods

    private bool IsGreeting(string message)
    {
        string[] greetings = { "xin ch√†o", "ch√†o", "hello", "hi", "hey", "h·∫ø nh√¥", "h·∫ø l√¥", "ch√†o b·∫°n", "ch√†o bot" };
        return greetings.Any(g => message.StartsWith(g) || message == g);
    }

    private bool IsFarewell(string message)
    {
        string[] farewells = { "t·∫°m bi·ªát", "bye", "goodbye", "h·∫πn g·∫∑p l·∫°i", "th√¥i", "tho√°t" };
        return farewells.Any(f => message.Contains(f));
    }

    private bool IsThanking(string message)
    {
        string[] thanks = { "c·∫£m ∆°n", "c√°m ∆°n", "thank", "thanks" };
        return thanks.Any(t => message.Contains(t));
    }

    private string GetGreetingResponse()
    {
        string[] responses = {
            "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω s√°ch c·ªßa BookInfoFinder. B·∫°n mu·ªën t√¨m s√°ch g√¨ h√¥m nay?",
            "Ch√†o b·∫°n! üòä H√£y cho t√¥i bi·∫øt b·∫°n th√≠ch ƒë·ªçc s√°ch g√¨, t√¥i s·∫Ω g·ª£i √Ω cho b·∫°n nh√©!",
            "Hello! üìö T√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√°m ph√° th·∫ø gi·ªõi s√°ch. B·∫°n mu·ªën t√¨m g√¨?"
        };
        return responses[new Random().Next(responses.Length)];
    }

    #endregion

    #region Gemini API

    private async Task<string> CallGemini(string prompt, string key)
    {
        try
        {
            using var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(15);
            
            var payload = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = prompt }
                        }
                    }
                },
                generationConfig = new
                {
                    temperature = 0.8,
                    maxOutputTokens = 600,
                    topP = 0.95,
                    topK = 40
                }
            };

            Console.WriteLine($"Calling Gemini API with key: {key.Substring(0, 10)}...");
            var response = await client.PostAsJsonAsync(
                $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={key}", 
                payload
            );

            Console.WriteLine($"Gemini API Response Status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JsonElement>();
                
                var text = result
                    .GetProperty("candidates")[0]
                    .GetProperty("content")
                    .GetProperty("parts")[0]
                    .GetProperty("text")
                    .GetString();
                
                Console.WriteLine($"Gemini API Success: Response length = {text?.Length ?? 0}");
                return text ?? "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi l√∫c n√†y.";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Gemini API Error Response: {errorContent}");
                return "Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI l√∫c n√†y. ü§ñ";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gemini API Exception: {ex.Message}");
            return "Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI l√∫c n√†y. ü§ñ";
        }
    }

    #endregion
}

#region Supporting Classes

public class ConversationContext
{
    private readonly List<ChatMessage> _messages = new();
    private readonly int _maxMessages = 20;
    public int MessageCount => _messages.Count;

    public void AddMessage(string role, string content)
    {
        _messages.Add(new ChatMessage 
        { 
            Role = role, 
            Content = content, 
            Timestamp = DateTime.UtcNow 
        });
        
        // Gi·ªØ t·ªëi ƒëa N tin nh·∫Øn
        if (_messages.Count > _maxMessages)
        {
            _messages.RemoveAt(0);
        }
    }

    public string GetFormattedHistory(int count = 5)
    {
        var recent = _messages.TakeLast(count).ToList();
        if (!recent.Any()) return "Ch∆∞a c√≥ l·ªãch s·ª≠ h·ªôi tho·∫°i.";
        
        return string.Join("\n", recent.Select(m => 
            $"{(m.Role == "user" ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω")}: {m.Content}"));
    }

    public void Clear()
    {
        _messages.Clear();
    }
}

public class ChatMessage
{
    public string Role { get; set; } = "";
    public string Content { get; set; } = "";
    public DateTime Timestamp { get; set; }
}

public class IntentAnalysis
{
    public string Intent { get; set; } = "";
    public string QueryType { get; set; } = "";
    public SearchParams SearchParams { get; set; } = new();
    public string? ContextReference { get; set; }
    public string Explanation { get; set; } = "";
}

public class SearchParams
{
    public string? Title { get; set; }
    public string? Author { get; set; }
    public string? Category { get; set; }
    public string? BookMentioned { get; set; }
}

public class DatabaseResults
{
    public List<BookListDto> Books { get; set; } = new();
    public int TotalBooks { get; set; }
    public BookListDto? FocusedBook { get; set; }
    public List<BookListDto> RelatedBooks { get; set; } = new();
    public List<BookListDto> AuthorBooks { get; set; } = new();
    public List<BookListDto> TopRatedBooks { get; set; } = new();
    public List<BookListDto> TrendingBooks { get; set; } = new();
    public List<CategoryDto> AllCategories { get; set; } = new();
}

#endregion