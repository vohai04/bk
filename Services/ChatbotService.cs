using BookInfoFinder.Services.Interface;
using BookInfoFinder.Models.Dto;
using BookInfoFinder.Data;
using BookInfoFinder.Models.Entity;
using System.Text.Json;
using System.Text;
using Microsoft.EntityFrameworkCore;

namespace BookInfoFinder.Services;

public class ChatbotService : IChatbotService
{
    private readonly IBookService _bookService;
    private readonly IRatingService _ratingService;
    private readonly IFavoriteService _favoriteService;
    private readonly ICategoryService _categoryService;
    private readonly IAuthorService _authorService;
    private readonly ITagService _tagService;
    private readonly IConfiguration _config;
    private readonly BookContext _db;
    private readonly HttpClient _httpClient;
    private readonly string? _geminiApiKey;
    private readonly string? _geminiModel;

    public ChatbotService(
        IBookService bookService,
        IRatingService ratingService,
        IFavoriteService favoriteService,
        ICategoryService categoryService,
        IAuthorService authorService,
        ITagService tagService,
        IConfiguration config,
        BookContext db)
    {
        _bookService = bookService;
        _ratingService = ratingService;
        _favoriteService = favoriteService;
        _categoryService = categoryService;
        _authorService = authorService;
        _tagService = tagService;
        _config = config;
        _db = db;
        _httpClient = new HttpClient();
        _geminiApiKey = _config["GEMINI:ApiKey"];
        _geminiModel = _config["GEMINI:Model"] ?? "gemini-2.0-flash-exp";
        
        Console.WriteLine($"Gemini API Key: {(_geminiApiKey != null ? "‚úÖ LOADED" : "‚ùå NULL")}, model={_geminiModel}");
    }

    // ==================== MAIN ENTRY POINT ====================
    public async Task<string> GetChatbotReplyAsync(string message, string? sessionId)
    {
        if (string.IsNullOrEmpty(_geminiApiKey))
        {
            return "‚ö†Ô∏è API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra appsettings.json";
        }

        try
        {
            // L∆∞u tin nh·∫Øn c·ªßa user
            if (!string.IsNullOrEmpty(sessionId))
            {
                await AddMessageAsync(new ChatbotDto
                {
                    SessionId = sessionId,
                    Role = "user",
                    Message = message,
                    CreatedAt = DateTime.UtcNow
                });
            }

            // X·ª≠ l√Ω v·ªõi AI
            var response = await ProcessWithGeminiAI(message, sessionId);

            // L∆∞u ph·∫£n h·ªìi c·ªßa bot
            if (!string.IsNullOrEmpty(sessionId))
            {
                await AddMessageAsync(new ChatbotDto
                {
                    SessionId = sessionId,
                    Role = "assistant",
                    Message = response,
                    CreatedAt = DateTime.UtcNow
                });
            }

            return response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error in GetChatbotReplyAsync: {ex.Message}");
            return "üòî Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // ==================== AI PROCESSING ====================
    private async Task<string> ProcessWithGeminiAI(string userMessage, string? sessionId)
    {
        // B∆∞·ªõc 1: L·∫•y context t·ª´ database
        var dbContext = await BuildDatabaseContext();

        // B∆∞·ªõc 2: L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i (n·∫øu c√≥)
        var conversationHistory = "";
        if (!string.IsNullOrEmpty(sessionId))
        {
            var history = await GetHistoryAsync(sessionId);
            var recentMessages = history.OrderByDescending(h => h.CreatedAt).Take(5).ToList();
            
            if (recentMessages.Any())
            {
                conversationHistory = "\n=== L·ªäCH S·ª¨ H·ªòI THO·∫†I G·∫¶N ƒê√ÇY ===\n";
                foreach (var msg in recentMessages.OrderBy(m => m.CreatedAt))
                {
                    conversationHistory += $"{msg.Role}: {msg.Message}\n";
                }
            }
        }

        // B∆∞·ªõc 3: T·∫°o prompt cho AI
        var systemPrompt = BuildSystemPrompt(dbContext, conversationHistory);
        var fullPrompt = $"{systemPrompt}\n\nNg∆∞·ªùi d√πng: {userMessage}";

        // B∆∞·ªõc 4: G·ªçi Gemini API
        return await CallGeminiAPI(fullPrompt);
    }

    // ==================== BUILD DATABASE CONTEXT ====================
    private async Task<string> BuildDatabaseContext()
    {
        var context = new StringBuilder();
        context.AppendLine("=== TH√îNG TIN DATABASE ===\n");

        try
        {
            // Th·ªëng k√™ t·ªïng quan
            var totalBooks = (await _bookService.GetAllBooksAsync()).Count();
            var totalAuthors = (await _authorService.GetAllAuthorsAsync()).Count();
            var totalCategories = (await _categoryService.GetAllCategoriesAsync()).Count();
            var totalTags = (await _tagService.GetAllTagsAsync()).Count();

            context.AppendLine("üìä TH·ªêNG K√ä:");
            context.AppendLine($"- S√°ch: {totalBooks}");
            context.AppendLine($"- T√°c gi·∫£: {totalAuthors}");
            context.AppendLine($"- Th·ªÉ lo·∫°i: {totalCategories}");
            context.AppendLine($"- Tags: {totalTags}\n");

            // Danh s√°ch s√°ch (10 cu·ªën ƒë·∫ßu)
            var books = await _bookService.GetAllBooksAsync();
            context.AppendLine("üìö M·ªòT S·ªê S√ÅCH:");
            foreach (var book in books.Take(10))
            {
                context.AppendLine($"- '{book.Title}' - {book.AuthorName} ({book.CategoryName})");
            }
            context.AppendLine();

            // Danh s√°ch t√°c gi·∫£
            var authors = await _authorService.GetAllAuthorsAsync();
            context.AppendLine("üë§ M·ªòT S·ªê T√ÅC GI·∫¢:");
            foreach (var author in authors.Take(10))
            {
                context.AppendLine($"- {author.Name} ({author.BookCount} s√°ch)");
            }
            context.AppendLine();

            // Danh s√°ch th·ªÉ lo·∫°i
            var categories = await _categoryService.GetAllCategoriesAsync();
            context.AppendLine("üìñ TH·ªÇ LO·∫†I:");
            foreach (var category in categories)
            {
                context.AppendLine($"- {category.Name} ({category.BookCount} s√°ch)");
            }
            context.AppendLine();

            // Tags
            var tags = await _tagService.GetAllTagsAsync();
            context.AppendLine($"üè∑Ô∏è TAGS: {string.Join(", ", tags.Take(20).Select(t => t.Name))}");
        }
        catch (Exception ex)
        {
            context.AppendLine($"‚ö†Ô∏è L·ªói khi l·∫•y th√¥ng tin database: {ex.Message}");
        }

        return context.ToString();
    }

    // ==================== BUILD SYSTEM PROMPT ====================
    private string BuildSystemPrompt(string dbContext, string conversationHistory)
    {
        return $@"B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng qu·∫£n l√Ω s√°ch. 

{dbContext}

{conversationHistory}

NHI·ªÜM V·ª§:
1. Tr·∫£ l·ªùi c√¢u h·ªèi ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin database ·ªü tr√™n
2. Hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n ti·∫øng Vi·ªát (nhi·ªÅu c√°ch h·ªèi kh√°c nhau)
3. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c, th√¢n thi·ªán
4. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, n√≥i r√µ v√† g·ª£i √Ω

C√ÅC LO·∫†I C√ÇU H·ªéI TH∆Ø·ªúNG G·∫∂P:
- Th·ªëng k√™: ""C√≥ bao nhi√™u s√°ch?"", ""T·ªïng s·ªë t√°c gi·∫£?"", ""S·ªë l∆∞·ª£ng th·ªÉ lo·∫°i?""
- T√¨m ki·∫øm: ""S√°ch v·ªÅ AI"", ""S√°ch c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh"", ""Th·ªÉ lo·∫°i Fantasy""
- Chi ti·∫øt: ""Chi ti·∫øt s√°ch Harry Potter"", ""Th√¥ng tin t√°c gi·∫£..."", ""M√¥ t·∫£ th·ªÉ lo·∫°i...""
- ƒê·ªÅ xu·∫•t: ""S√°ch hay nh·∫•t"", ""S√°ch ƒë∆∞·ª£c y√™u th√≠ch"", ""S√°ch xu h∆∞·ªõng""
- Ch√†o h·ªèi: ""Xin ch√†o"", ""Hello"", ""Hi""

QUY T·∫ÆC TR·∫¢ L·ªúI:
- V·ªõi c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng/th·ªëng k√™: Tr·∫£ l·ªùi tr·ª±c ti·∫øp con s·ªë t·ª´ DATABASE CONTEXT
- V·ªõi c√¢u h·ªèi li·ªát k√™: Ch·ªâ li·ªát k√™ 3-5 items n·∫øu c√≥ nhi·ªÅu
- V·ªõi c√¢u h·ªèi t√¨m ki·∫øm: T√¨m trong DATABASE CONTEXT v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t
- V·ªõi c√¢u ch√†o: Ch√†o l·∫°i th√¢n thi·ªán v√† gi·ªõi thi·ªáu b·∫£n th√¢n
- N·∫øu kh√¥ng ch·∫Øc ch·∫Øn: N√≥i r√µ v√† h·ªèi l·∫°i ng∆∞·ªùi d√πng

ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI:
- S·ª≠ d·ª•ng emoji ph√π h·ª£p (üìö üîç ‚ú® üë§ üìä)
- Ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc
- Kh√¥ng d√πng markdown ph·ª©c t·∫°p
- Ch·ªâ li·ªát k√™ th√¥ng tin C√ì TRONG DATABASE CONTEXT

L∆ØU √ù QUAN TR·ªåNG:
- TUY·ªÜT ƒê·ªêI ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n DATABASE CONTEXT ·ªü tr√™n
- KH√îNG b·ªãa th√¥ng tin kh√¥ng c√≥ trong context
- N·∫øu kh√¥ng t√¨m th·∫•y, n√≥i: ""Kh√¥ng t√¨m th·∫•y [th√¥ng tin] trong h·ªá th·ªëng""";
    }

    // ==================== CALL GEMINI API ====================
    private async Task<string> CallGeminiAPI(string prompt)
    {
        var url = $"https://generativelanguage.googleapis.com/v1beta/models/{_geminiModel}:generateContent?key={_geminiApiKey}";

        var requestBody = new
        {
            contents = new[]
            {
                new
                {
                    parts = new[]
                    {
                        new { text = prompt }
                    }
                }
            },
            generationConfig = new
            {
                temperature = 0.7,
                topK = 40,
                topP = 0.95,
                maxOutputTokens = 1024
            }
        };

        var json = JsonSerializer.Serialize(requestBody);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        try
        {
            var response = await _httpClient.PostAsync(url, content);
            response.EnsureSuccessStatusCode();

            var responseJson = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<JsonElement>(responseJson);

            if (responseObject.TryGetProperty("candidates", out var candidates) &&
                candidates.GetArrayLength() > 0 &&
                candidates[0].TryGetProperty("content", out var contentProp) &&
                contentProp.TryGetProperty("parts", out var parts) &&
                parts.GetArrayLength() > 0 &&
                parts[0].TryGetProperty("text", out var text))
            {
                return text.GetString() ?? "Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi.";
            }

            return "‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ AI.";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"‚ùå HTTP Error: {ex.Message}");
            return "üòî L·ªói k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c k·∫øt n·ªëi m·∫°ng.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error: {ex.Message}");
            return $"üòî L·ªói: {ex.Message}";
        }
    }

    // ==================== HISTORY MANAGEMENT ====================
    public async Task<List<ChatbotDto>> GetHistoryAsync(string sessionId)
    {
        try
        {
            return await _db.Chatbots
                .Where(c => c.SessionId == sessionId)
                .OrderBy(c => c.CreatedAt)
                .Select(c => new ChatbotDto
                {
                    ChatbotId = c.ChatbotId,
                    SessionId = c.SessionId,
                    Role = c.Role,
                    Message = c.Message,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error getting history: {ex.Message}");
            return new List<ChatbotDto>();
        }
    }

    public async Task AddMessageAsync(ChatbotDto message)
    {
        try
        {
            var chatbotMessage = new Chatbot
            {
                SessionId = message.SessionId,
                Role = message.Role,
                Message = message.Message,
                CreatedAt = message.CreatedAt
            };

            _db.Chatbots.Add(chatbotMessage);
            await _db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error adding message: {ex.Message}");
        }
    }
}