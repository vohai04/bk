// <auto-generated />
using System;
using BookInfoFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookInfoFinder.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Biography = "British author, best known for the Harry Potter series",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "J.K. Rowling",
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 2,
                            Biography = "English novelist and essayist, known for 1984 and Animal Farm",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "George Orwell",
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 3,
                            Biography = "Japanese writer known for surreal fiction",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1949, 1, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Haruki Murakami",
                            Nationality = "Japanese"
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("ImageBase64")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Abstract = "Harry Potter discovers he is a wizard on his 11th birthday and begins his magical education at Hogwarts School of Witchcraft and Wizardry.",
                            AuthorId = 1,
                            CategoryId = 1,
                            Description = "A young wizard's journey begins",
                            ISBN = "9780747532699",
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Harry Potter and the Philosopher's Stone",
                            UserId = 1
                        },
                        new
                        {
                            BookId = 2,
                            Abstract = "Winston Smith struggles for freedom in a world where Big Brother is always watching and the Thought Police control minds.",
                            AuthorId = 2,
                            CategoryId = 4,
                            Description = "A dystopian social science fiction novel",
                            ISBN = "9780451524935",
                            PublicationDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "1984",
                            UserId = 1
                        },
                        new
                        {
                            BookId = 3,
                            Abstract = "Toru Watanabe looks back on his days as a college student living in Tokyo and recalls his relationships and personal growth.",
                            AuthorId = 3,
                            CategoryId = 3,
                            Description = "A coming-of-age story set in 1960s Tokyo",
                            ISBN = "9780375704024",
                            PublicationDate = new DateTime(1987, 8, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Norwegian Wood",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.BookComment", b =>
                {
                    b.Property<int>("BookCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookCommentId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("Star")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("BookCommentId");

                    b.HasIndex("BookId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("BookComments", (string)null);

                    b.HasData(
                        new
                        {
                            BookCommentId = 1,
                            BookId = 1,
                            Comment = "Amazing book! The magical world is so well-crafted.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Star = 5,
                            UserId = 2
                        },
                        new
                        {
                            BookCommentId = 2,
                            BookId = 2,
                            Comment = "A thought-provoking and chilling vision of the future.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Star = 4,
                            UserId = 2
                        },
                        new
                        {
                            BookCommentId = 3,
                            BookId = 3,
                            Comment = "Beautiful and melancholic. Murakami's writing is exceptional.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Star = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.BookTag", b =>
                {
                    b.Property<int>("BookTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookTagId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("BookTagId");

                    b.HasIndex("BookId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags", (string)null);

                    b.HasData(
                        new
                        {
                            BookTagId = 1,
                            BookId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BookTagId = 2,
                            BookId = 1,
                            TagId = 2
                        },
                        new
                        {
                            BookTagId = 3,
                            BookId = 1,
                            TagId = 3
                        },
                        new
                        {
                            BookTagId = 4,
                            BookId = 2,
                            TagId = 4
                        },
                        new
                        {
                            BookTagId = 5,
                            BookId = 2,
                            TagId = 5
                        },
                        new
                        {
                            BookTagId = 6,
                            BookId = 3,
                            TagId = 6
                        },
                        new
                        {
                            BookTagId = 7,
                            BookId = 3,
                            TagId = 7
                        },
                        new
                        {
                            BookTagId = 8,
                            BookId = 3,
                            TagId = 8
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fantasy novels and stories",
                            Name = "Fantasy"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Science fiction books",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Literary and contemporary fiction",
                            Name = "Literary Fiction"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dystopian and political fiction",
                            Name = "Dystopian"
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites", (string)null);

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            FavoriteId = 2,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Address = "50 Bedford Square, London, UK",
                            ContactInfo = "contact@bloomsbury.com",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bloomsbury Publishing"
                        },
                        new
                        {
                            PublisherId = 2,
                            Address = "1745 Broadway, New York, NY 10019, USA",
                            ContactInfo = "info@penguinrandomhouse.com",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            PublisherId = 3,
                            Address = "1745 Broadway, New York, NY, USA",
                            ContactInfo = "vintage@randomhouse.com",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vintage Books"
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Star")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings", (string)null);

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Review = "",
                            Star = 5,
                            UserId = 2
                        },
                        new
                        {
                            RatingId = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Review = "",
                            Star = 4,
                            UserId = 2
                        },
                        new
                        {
                            RatingId = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Review = "",
                            Star = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.SearchHistory", b =>
                {
                    b.Property<int>("SearchHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SearchHistoryId"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ResultCount")
                        .HasColumnType("integer");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SearchHistoryId");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories", (string)null);

                    b.HasData(
                        new
                        {
                            SearchHistoryId = 1,
                            Author = "J.K. Rowling",
                            BookId = 1,
                            CategoryId = 1,
                            ResultCount = 1,
                            SearchQuery = "Harry Potter fantasy",
                            SearchedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Harry Potter",
                            UserId = 2
                        },
                        new
                        {
                            SearchHistoryId = 2,
                            Author = "George Orwell",
                            BookId = 2,
                            CategoryId = 4,
                            ResultCount = 1,
                            SearchQuery = "1984 dystopian",
                            SearchedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "1984",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagId");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Magic"
                        },
                        new
                        {
                            TagId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Wizard"
                        },
                        new
                        {
                            TagId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Adventure"
                        },
                        new
                        {
                            TagId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Dystopia"
                        },
                        new
                        {
                            TagId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Surveillance"
                        },
                        new
                        {
                            TagId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Romance"
                        },
                        new
                        {
                            TagId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Coming of Age"
                        },
                        new
                        {
                            TagId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            Name = "Japan"
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "haivo3225@gmail.com",
                            FullName = "Admin User",
                            Password = "admin123",
                            Role = 0,
                            Status = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john@example.com",
                            FullName = "John Doe",
                            Password = "user123",
                            Role = 1,
                            Status = 1,
                            UserName = "johndoe"
                        });
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Book", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BookInfoFinder.Models.Entity.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.BookComment", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Book", "Book")
                        .WithMany("BookComments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.BookComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookInfoFinder.Models.Entity.User", "User")
                        .WithMany("BookComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.BookTag", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Book", "Book")
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.Tag", "Tag")
                        .WithMany("BookTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Favorite", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Rating", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookInfoFinder.Models.Entity.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.SearchHistory", b =>
                {
                    b.HasOne("BookInfoFinder.Models.Entity.Book", "Book")
                        .WithMany("SearchHistories")
                        .HasForeignKey("BookId");

                    b.HasOne("BookInfoFinder.Models.Entity.Category", "Category")
                        .WithMany("SearchHistories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BookInfoFinder.Models.Entity.User", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Book", b =>
                {
                    b.Navigation("BookComments");

                    b.Navigation("BookTags");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.BookComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.Tag", b =>
                {
                    b.Navigation("BookTags");
                });

            modelBuilder.Entity("BookInfoFinder.Models.Entity.User", b =>
                {
                    b.Navigation("BookComments");

                    b.Navigation("Books");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");

                    b.Navigation("SearchHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
